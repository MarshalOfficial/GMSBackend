// <auto-generated />
using System;
using GMSBackend.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GMSBackend.Migrations
{
    [DbContext(typeof(DBRepository))]
    [Migration("20210115212153_filecontroller")]
    partial class filecontroller
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GMSBackend.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ContractFilePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("MembershipJoinTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<long?>("Referral")
                        .HasColumnType("bigint");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long?>("VisitorID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GMSBackend.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("GMSBackend.Entities.ClientPeriodicCheckUp", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<double?>("ABS")
                        .HasColumnType("double precision");

                    b.Property<long>("AccountID")
                        .HasColumnType("bigint");

                    b.Property<double?>("BUTT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Chest")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double?>("LeftArm")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCalves")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftThigh")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightArm")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCalves")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightThigh")
                        .HasColumnType("double precision");

                    b.Property<int>("SessionNo")
                        .HasColumnType("integer");

                    b.Property<double?>("WaistSize")
                        .HasColumnType("double precision");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.ToTable("ClientPeriodicCheckUps");
                });

            modelBuilder.Entity("GMSBackend.Entities.JobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("JobInfos");
                });

            modelBuilder.Entity("GMSBackend.Entities.MembershipJoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("MembershipJoinTypes");
                });

            modelBuilder.Entity("GMSBackend.Entities.ProductCodingInfo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("CodingParent_ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ProductCodingInfos");
                });

            modelBuilder.Entity("GMSBackend.Entities.ProductMain", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<double?>("BuyPrice")
                        .HasColumnType("double precision");

                    b.Property<long>("CodingID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductBarCode")
                        .HasColumnType("text");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<double?>("SalePrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("SalePrice2")
                        .HasColumnType("double precision");

                    b.Property<int?>("SessionCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("ProductMains");
                });

            modelBuilder.Entity("GMSBackend.Entities.SaleInvoiceDetails", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("InvoiceID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<short?>("Reduction_Percent")
                        .HasColumnType("smallint");

                    b.Property<double?>("Reduction_Price")
                        .HasColumnType("double precision");

                    b.Property<int>("SessionQty")
                        .HasColumnType("integer");

                    b.Property<int>("SessionReserved")
                        .HasColumnType("integer");

                    b.Property<int>("SessionUsed")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("SaleInvoiceDetails");
                });

            modelBuilder.Entity("GMSBackend.Entities.SaleInvoiceHeader", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("InvDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("InvType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<double?>("Reduction")
                        .HasColumnType("double precision");

                    b.Property<long?>("VisitorID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("SaleInvoiceHeaders");
                });

            modelBuilder.Entity("GMSBackend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GMSBackend.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("GMSBackend.Entities.SaleInvoiceDetails", b =>
                {
                    b.HasOne("GMSBackend.Entities.SaleInvoiceHeader", "SaleInvoiceHeader")
                        .WithMany("SaleInvoiceDetails")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleInvoiceHeader");
                });

            modelBuilder.Entity("GMSBackend.Entities.SaleInvoiceHeader", b =>
                {
                    b.Navigation("SaleInvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
